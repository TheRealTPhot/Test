// Initialize variables
let userId = null;
let userData = {
    limit: 60,
    weeklyData: Array(7).fill(0),
    appUsage: {},
    badges: {},
    // Thay ƒë·ªïi c·∫•u tr√∫c completedActivities
    completedActivities: {}, // { activityId: [date1, date2, ...] }
    customActivities: [],
    loginStreak: 0,
    underLimitStreak: 0,
    learningStreak: 0,
    readingStreak: 0,
    exerciseStreak: 0,
    quizScores: { physical: 0, mental: 0, concentration: 0 },
    quizHistory: [],
    lastLoginDate: null,
    lastResetDate: null,
    // Th√™m tr∆∞·ªùng m·ªõi ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ ho·∫°t ƒë·ªông theo ng√†y
    activityHistory: {} // { date: { activityId1: true, activityId2: true, ... } }
};

const todayIndex = new Date().getDay(); // 0=Sun, 1=Mon, ..., 6=Sat

const socialApps = [
    { id: 'facebook', name: 'Facebook', color: '#1877f2', iconClass: 'fa-brands fa-facebook' },
    { id: 'instagram', name: 'Instagram', color: '#E4405F', iconClass: 'fa-brands fa-instagram' },
    { id: 'tiktok', name: 'TikTok', color: '#000000', iconClass: 'fa-brands fa-tiktok' },
    { id: 'twitter', name: 'Twitter', color: '#1DA1F2', iconClass: 'fa-brands fa-x-twitter' },
    { id: 'threads', name: 'Threads', color: '#000000', iconClass: 'fa-brands fa-threads' },
    { id: 'youtube', name: 'YouTube', color: '#FF0000', iconClass: 'fa-brands fa-youtube' },
];

const defaultHealthyActivities = [
    { id: 'reading', name: 'ƒê·ªçc s√°ch 30 ph√∫t' },
    { id: 'exercise', name: 'T·∫≠p th·ªÉ d·ª•c 15 ph√∫t' },
    { id: 'learning', name: 'H·ªçc t·∫≠p 60 ph√∫t' },
    { id: 'music', name: 'Th∆∞ gi√£n v·ªõi √¢m nh·∫°c 10 ph√∫t' },
    { id: 'conversation', name: 'Tr√≤ chuy·ªán tr·ª±c ti·∫øp' },
    { id: 'pre_sleep_tech_free', name: 'Kh√¥ng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i 30 ph√∫t tr∆∞·ªõc khi ng·ªß' },
    { id: 'post_wake_tech_free', name: 'Kh√¥ng s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi ngay khi v·ª´a ng·ªß d·∫≠y' }
];

const allBadges = [
    { id: 'first_day', name: 'Ng√†y ƒë·∫ßu ti√™n', description: 'ƒêƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng', icon: '‚òÄÔ∏è' },
    { id: 'under_limit_1', name: 'Ki·ªÉm so√°t t·ªët', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 1 ng√†y', icon: '‚úÖ' },
    { id: 'under_limit_5', name: 'Chu·ªói 5 ng√†y', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 5 ng√†y li√™n ti·∫øp', icon: 'üèÖ' },
    { id: 'under_limit_10', name: 'Chuy√™n gia k·ª∑ lu·∫≠t', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 10 ng√†y li√™n ti·∫øp', icon: 'ü•á' },
    { id: 'under_limit_20', name: 'Th·ªëng tr·ªã', description: 'Gi·ªØ th·ªùi gian d∆∞·ªõi gi·ªõi h·∫°n trong 20 ng√†y li√™n ti·∫øp', icon: 'üëë' },
    { id: 'first_activity', name: 'Ho·∫°t ƒë·ªông ƒë·∫ßu ti√™n', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông l√†nh m·∫°nh ƒë·∫ßu ti√™n', icon: 'üå±' },
    { id: 'all_activities', name: 'To√†n nƒÉng', description: 'Ho√†n th√†nh t·∫•t c·∫£ ho·∫°t ƒë·ªông l√†nh m·∫°nh trong m·ªôt ng√†y', icon: 'üåü' },
    { id: 'quiz_pro', name: 'Chuy√™n gia s·ª©c kh·ªèe', description: 'Ho√†n th√†nh b√†i ki·ªÉm tra s·ª©c kh·ªèe', icon: 'üß†' },
    { id: 'dependency_low_50', name: 'T·ª± ch·ªß s·ªë', description: 'ƒê·∫°t ƒëi·ªÉm ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi d∆∞·ªõi 50%', icon: '‚öñÔ∏è' },
    { id: 'dependency_low_40', name: 'Gi·∫£i ph√≥ng', description: 'ƒê·∫°t ƒëi·ªÉm ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi d∆∞·ªõi 40%', icon: 'üïäÔ∏è' },
    { id: 'dependency_low_30', name: 'Ch·ªß nh√¢n cu·ªôc s·ªëng', description: 'ƒê·∫°t ƒëi·ªÉm ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi d∆∞·ªõi 30%', icon: 'üîÆ' },
    { id: 'login_streak_5', name: 'Ki√™n tr√¨ 5', description: 'ƒêƒÉng nh·∫≠p 5 ng√†y li√™n ti·∫øp', icon: 'üî•' },
    { id: 'login_streak_10', name: 'Ki√™n tr√¨ 10', description: 'ƒêƒÉng nh·∫≠p 10 ng√†y li√™n ti·∫øp', icon: '‚ö°' },
    { id: 'login_streak_20', name: 'Ki√™n tr√¨ 20', description: 'ƒêƒÉng nh·∫≠p 20 ng√†y li√™n ti·∫øp', icon: 'üöÄ' },
    { id: 'learning_streak_5', name: 'Chu·ªói h·ªçc t·∫≠p 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông h·ªçc t·∫≠p 5 ng√†y li√™n ti·∫øp', icon: 'üìñ' },
    { id: 'learning_streak_10', name: 'Chu·ªói h·ªçc t·∫≠p 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông h·ªçc t·∫≠p 10 ng√†y li√™n ti·∫øp', icon: 'üéì' },
    { id: 'reading_streak_5', name: 'Chu·ªói ƒë·ªçc s√°ch 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông ƒë·ªçc s√°ch 5 ng√†y li√™n ti·∫øp', icon: 'üìï' },
    { id: 'reading_streak_10', name: 'Chu·ªói ƒë·ªçc s√°ch 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông ƒë·ªçc s√°ch 10 ng√†y li√™n ti·∫øp', icon: 'üìö' },
    { id: 'exercise_streak_5', name: 'Chu·ªói t·∫≠p th·ªÉ d·ª•c 5', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông t·∫≠p th·ªÉ d·ª•c 5 ng√†y li√™n ti·∫øp', icon: 'üí™' },
    { id: 'exercise_streak_10', name: 'Chu·ªói t·∫≠p th·ªÉ d·ª•c 10', description: 'Ho√†n th√†nh ho·∫°t ƒë·ªông t·∫≠p th·ªÉ d·ª•c 10 ng√†y li√™n ti·∫øp', icon: 'üèãÔ∏è' },
    { id: 'custom_activity', name: 'S√°ng t·∫°o', description: 'Th√™m m·ªôt ho·∫°t ƒë·ªông l√†nh m·∫°nh c·ªßa ri√™ng b·∫°n', icon: 'üé®' },
];

const quizQuestions = {
    physical: [
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y ƒëau ƒë·∫ßu, m·ªèi m·∫Øt, ho·∫∑c ƒëau c·ªï, vai, g√°y kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "Gi·∫•c ng·ªß c·ªßa b·∫°n c√≥ b·ªã gi√°n ƒëo·∫°n ho·∫∑c kh√≥ ng·ªß do s·ª≠ d·ª•ng thi·∫øt b·ªã ƒëi·ªán t·ª≠ kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y c∆° th·ªÉ m·ªát m·ªèi, u·ªÉ o·∫£i ngay c·∫£ khi kh√¥ng l√†m vi·ªác n·∫∑ng nh·ªçc kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y kh√≥ khƒÉn khi r·ªùi kh·ªèi m√†n h√¨nh ƒë·ªÉ tham gia c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c√≥ nh·ªØng b·ªØa ƒÉn qua loa ƒë·ªÉ ti·∫øp t·ª•c l∆∞·ªõt m·∫°ng kh√¥ng?", score: [1, 2, 3, 4, 5] },
    ],
    mental: [
        { q: "B·∫°n c√≥ th∆∞·ªùng xuy√™n c·∫£m th·∫•y lo l·∫Øng, cƒÉng th·∫≥ng ho·∫∑c d·ªÖ c√°u g·∫Øt kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y √°p l·ª±c ph·∫£i th·ªÉ hi·ªán m·ªôt h√¨nh ·∫£nh ho√†n h·∫£o tr√™n m·∫°ng kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y bu·ªìn b√£ ho·∫∑c tr·ªëng r·ªóng khi kh√¥ng ƒë∆∞·ª£c l∆∞·ªõt m·∫°ng kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y lo s·ª£ m√¨nh s·∫Ω b·ªè l·ª° c√°c xu h∆∞·ªõng, tin t·ª©c tr√™n m·∫°ng x√£ h·ªôi kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ th·∫•y m√¨nh d·ªÖ d√†ng so s√°nh b·∫£n th√¢n v·ªõi ng∆∞·ªùi kh√°c tr√™n m·∫°ng x√£ h·ªôi kh√¥ng?", score: [1, 2, 3, 4, 5] },
    ],
    concentration: [
        { q: "B·∫°n c√≥ d·ªÖ b·ªã xao nh√£ng b·ªüi ƒëi·ªán tho·∫°i khi ƒëang l√†m vi·ªác/h·ªçc t·∫≠p kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ ki·ªÉm tra ƒëi·ªán tho·∫°i ngay khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o kh√¥ng?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ c·∫£m th·∫•y kh√≥ khƒÉn khi ph·∫£i t·∫≠p trung v√†o m·ªôt cu·ªôc tr√≤ chuy·ªán tr·ª±c ti·∫øp?", score: [1, 2, 3, 4, 5] },
        { q: "B·∫°n c√≥ th·ªÉ ho√†n th√†nh m·ªôt nhi·ªám v·ª• m√† kh√¥ng b·ªã gi√°n ƒëo·∫°n kh√¥ng?", score: [5, 4, 3, 2, 1] },
        { q: "B·∫°n c√≥ th·ªÉ ƒë·ªçc m·ªôt cu·ªën s√°ch m√† kh√¥ng c·∫ßn ph·∫£i c·∫ßm ƒëi·ªán tho·∫°i kh√¥ng?", score: [5, 4, 3, 2, 1] },
    ],
};

const quizOptions = ["Kh√¥ng bao gi·ªù", "Hi·∫øm khi", "Th·ªânh tho·∫£ng", "Th∆∞·ªùng xuy√™n", "Lu√¥n lu√¥n"];

// Pomodoro Timer Variables
const pomodoro = {
    workDuration: 25 * 60, // 25 minutes in seconds
    breakDuration: 5 * 60, // 5 minutes in seconds
    timer: null,
    isWorkTime: true,
    isRunning: false,
    timeRemaining: 0,
    intervalId: null
};

// Initialize localStorage
function initLocalStorage() {
    if (!localStorage.getItem('userId')) {
        userId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('userId', userId);
    } else {
        userId = localStorage.getItem('userId');
    }

    const savedData = localStorage.getItem('userData');
    if (savedData) {
        userData = JSON.parse(savedData);
    } else {
        saveData();
    }
}

function saveData() {
    localStorage.setItem('userData', JSON.stringify(userData));
}

// Initialize app
function initApp() {
    const loadingSpinner = document.getElementById('loading-spinner');
    const mainContent = document.getElementById('main-content');
    const surveyContent = document.getElementById('survey-content');
    
    if (loadingSpinner) loadingSpinner.classList.add('hidden');
    if (mainContent) mainContent.classList.remove('hidden');
    if (surveyContent) surveyContent.classList.remove('hidden');

    if (document.getElementById('user-id-display')) {
        document.getElementById('user-id-display').textContent = userId;
        
        // Ki·ªÉm tra reset h√†ng ng√†y
        checkDailyReset();
        
        // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t th√†nh t·ª±u t·ª´ d·ªØ li·ªáu kh·∫£o s√°t
        checkAndUpdateQuizBadges();
        
        updateMainUI();
        
        // Kh·ªüi t·∫°o giao di·ªán l·ªãch s·ª≠ n·∫øu c√≥ ph·∫ßn t·ª≠
        if (document.getElementById('history-container')) {
            updateActivityHistory('day');
        }
    }
    
    if (document.getElementById('quiz-content')) {
        updateSurveyUI();
    }
}

// Th√™m h√†m ki·ªÉm tra v√† c·∫≠p nh·∫≠t th√†nh t·ª±u t·ª´ kh·∫£o s√°t
function checkAndUpdateQuizBadges() {
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh kh·∫£o s√°t
    if (userData.quizHistory && userData.quizHistory.length > 0) {
        // ƒê·∫£m b·∫£o th√†nh t·ª±u quiz_pro ƒë∆∞·ª£c c·∫•p
        awardBadge('quiz_pro');
        
        // Ki·ªÉm tra k·∫øt qu·∫£ kh·∫£o s√°t g·∫ßn nh·∫•t
        const latestQuiz = userData.quizHistory[userData.quizHistory.length - 1];
        const scores = latestQuiz.scores;
        
        const dependencyPercentage = ((scores.physical * 0.4) + (scores.mental * 0.4) + (scores.concentration * 0.2)) / 5 * 20;
        if (dependencyPercentage < 50) awardBadge('dependency_low_50');
        if (dependencyPercentage < 40) awardBadge('dependency_low_40');
        if (dependencyPercentage < 30) awardBadge('dependency_low_30');
    }
}

// Th√™m h√†m l·∫•y ng√†y hi·ªán t·∫°i theo GMT+7
function getGMT7Date() {
    const now = new Date();
    // Convert to UTC+7
    const utc7 = new Date(now.getTime() + (7 * 60 * 60 * 1000) + (now.getTimezoneOffset() * 60000));
    return utc7;
}

// C·∫≠p nh·∫≠t h√†m ki·ªÉm tra reset t·ª± ƒë·ªông
function checkDailyReset() {
    const nowGMT7 = getGMT7Date();
    const todayGMT7 = nowGMT7.toISOString().slice(0, 10);
    const lastReset = userData.lastResetDate;
    
    // Ki·ªÉm tra n·∫øu ƒë√£ qua 6h s√°ng h√¥m nay (GMT+7)
    if (!lastReset || lastReset !== todayGMT7) {
        // Thi·∫øt l·∫≠p th·ªùi gian reset l√† 6h s√°ng GMT+7
        const resetTime = new Date(nowGMT7);
        resetTime.setHours(6, 0, 0, 0);
        
        // N·∫øu th·ªùi gian hi·ªán t·∫°i ƒë√£ qua 6h s√°ng
        if (nowGMT7 >= resetTime) {
            // Reset c√°c ho·∫°t ƒë·ªông h√†ng ng√†y
            userData.lastResetDate = todayGMT7;
            saveData();
            updateMainUI();
        }
    }
}

// Update Main Page UI
function updateMainUI() {
    try {
        // Update dashboard
        const currentUsageDisplay = document.getElementById('current-usage-display');
        const limitInput = document.getElementById('limit-input');
        const limitMessage = document.getElementById('limit-message');
        const progressBar = document.getElementById('progress-bar');
        
        if (currentUsageDisplay) {
            const totalUsageToday = userData.weeklyData[todayIndex] || 0;
            currentUsageDisplay.textContent = `${totalUsageToday}p`;
        }
        
        if (limitInput) {
            const limit = userData.limit || 60;
            limitInput.value = limit;
        }
        
        if (limitMessage) {
            const limit = userData.limit || 60;
            limitMessage.innerHTML = `Gi·ªõi h·∫°n: <strong>${limit}p</strong>`;
            
            const totalUsageToday = userData.weeklyData[todayIndex] || 0;
            const percentage = Math.min((totalUsageToday / limit) * 100, 100);
            
            if (progressBar) {
                progressBar.style.width = `${percentage}%`;
            }
            
            if (totalUsageToday >= limit) {
                limitMessage.innerHTML = `<span class="font-bold text-red-300">B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n!</span>`;
            } else if (totalUsageToday > 0) {
                limitMessage.innerHTML = `C√≤n l·∫°i: <strong>${Math.max(0, limit - totalUsageToday)}p</strong>`;
            }
        }

        // Update app usage inputs
        const appInputContainer = document.getElementById('app-input-container');
        if (appInputContainer) {
            const allApps = socialApps.concat(userData.customApps || []);
            appInputContainer.innerHTML = allApps.map(app => `
                <div class="input-group">
                    <div class="app-icon" style="background-color: ${app.color || '#ccc'}">
                        <i class="${app.iconClass || 'fa-solid fa-plus'}"></i>
                    </div>
                    <input type="number" id="input-${app.id}" placeholder="${app.name} (ph√∫t)" value="${(userData.appUsage[app.id] && userData.appUsage[app.id][todayIndex]) || 0}" class="flex-grow rounded-lg px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400">
                </div>
            `).join('');
        }

        // Update activities
        const healthyActivitiesList = document.getElementById('healthy-activities-list');
        if (healthyActivitiesList) {
            const allActivities = defaultHealthyActivities.concat(userData.customActivities || []);
            const todayGMT7 = getGMT7Date().toISOString().slice(0, 10);
            
            healthyActivitiesList.innerHTML = allActivities.map(activity => {
                const isCompletedToday = userData.completedActivities[activity.id]?.includes(todayGMT7);
                const streak = getActivityStreak(activity.id);
                
                return `
                    <div class="flex items-center justify-between p-3 bg-white rounded-lg shadow-sm">
                        <div>
                            <p class="text-gray-700">${activity.name}</p>
                            ${streak > 0 ? `<p class="text-xs text-indigo-600">Chu·ªói: ${streak} ng√†y</p>` : ''}
                        </div>
                        <button id="activity-${activity.id}" data-id="${activity.id}" class="complete-activity-btn px-4 py-1 rounded-full text-sm font-semibold transition duration-300
                            ${isCompletedToday ? 'bg-green-500 text-white cursor-not-allowed' : 'bg-indigo-200 text-indigo-700 hover:bg-indigo-300'}">
                            ${isCompletedToday ? 'ƒê√£ Ho√†n Th√†nh H√¥m Nay' : 'Ho√†n Th√†nh'}
                        </button>
                    </div>
                `;
            }).join('');
        }

        // Update badges
        const badgesGrid = document.getElementById('badges-grid');
        if (badgesGrid) {
            badgesGrid.innerHTML = allBadges.map(badge => `
                <div class="flex flex-col items-center space-y-2 p-3 rounded-xl bg-white shadow-sm transition-all transform hover:scale-105">
                    <span class="text-4xl ${userData.badges[badge.id] ? 'badge-earned' : 'badge-icon'}">${badge.icon}</span>
                    <p class="font-semibold text-center text-sm">${badge.name}</p>
                    <p class="text-xs text-center text-gray-500">${badge.description}</p>
                </div>
            `).join('');
        }
       
        // Update charts
        updateCharts();
    } catch (error) {
        console.error("Error in updateMainUI:", error);
    }
}

// Update Survey Page UI
function updateSurveyUI() {
    // Nothing specific to initialize on survey page load
}

// Update Charts
function updateCharts() {
    try {
        const appUsageChartCanvas = document.getElementById('app-usage-chart');
        const weeklyUsageChartCanvas = document.getElementById('weekly-usage-chart');
        
        if (appUsageChartCanvas) {
            const appLabels = socialApps.map(app => app.name);
            const appColors = socialApps.map(app => app.color);
            const appData = socialApps.map(app => (userData.appUsage[app.id] || Array(7).fill(0)));

            const datasets = appData.map((data, index) => ({
                label: appLabels[index],
                data: data,
                borderColor: appColors[index],
                backgroundColor: 'transparent',
                borderWidth: 2,
                fill: false,
                tension: 0.4,
                pointRadius: 5
            }));

            // Line chart for individual app usage
            if (window.appUsageChart) window.appUsageChart.destroy();
            window.appUsageChart = new Chart(appUsageChartCanvas.getContext('2d'), {
                type: 'line',
                data: {
                    labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'CN', 'T7'].sort(),
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { mode: 'index', intersect: false }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
        }

        // Bar chart for total weekly usage
        if (weeklyUsageChartCanvas) {
            if (window.weeklyUsageChart) window.weeklyUsageChart.destroy();
            const limitData = Array(7).fill(userData.limit || 60);
            window.weeklyUsageChart = new Chart(weeklyUsageChartCanvas.getContext('2d'), {
                type: 'bar',
                data: {
                    labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'CN', 'T7'].sort(),
                    datasets: [
                        {
                            label: 'Th·ªùi gian s·ª≠ d·ª•ng',
                            data: userData.weeklyData,
                            backgroundColor: '#6366f1',
                        },
                        {
                            label: 'Gi·ªõi h·∫°n',
                            data: limitData,
                            type: 'line',
                            borderColor: '#ef4444',
                            borderWidth: 2,
                            fill: false,
                            tension: 0.1,
                            pointRadius: 0
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { mode: 'index', intersect: false }
                    },
                    scales: {
                        y: { beginAtZero: true },
                        x: { stacked: false }
                    }
                }
            });
        }
       
        // Quiz history chart
        const quizHistoryChartCanvas = document.getElementById('quiz-history-chart');
        if (quizHistoryChartCanvas) {
            if (window.quizHistoryChart) window.quizHistoryChart.destroy();
            const historyLabels = userData.quizHistory.map((entry, index) => `L·∫ßn ${index + 1}`);
            const physicalData = userData.quizHistory.map(entry => entry.scores.physical);
            const mentalData = userData.quizHistory.map(entry => entry.scores.mental);
            const concentrationData = userData.quizHistory.map(entry => entry.scores.concentration);

            window.quizHistoryChart = new Chart(quizHistoryChartCanvas.getContext('2d'), {
                type: 'line',
                data: {
                    labels: historyLabels,
                    datasets: [
                        { label: 'Th·ªÉ ch·∫•t', data: physicalData, borderColor: '#4c51bf', fill: false, tension: 0.4 },
                        { label: 'Tinh th·∫ßn', data: mentalData, borderColor: '#6b46c1', fill: false, tension: 0.4 },
                        { label: 'T·∫≠p trung', data: concentrationData, borderColor: '#f56565', fill: false, tension: 0.4 }
                    ]
                },
                options: {
                    responsive: true,
                    scales: { y: { beginAtZero: true, suggestedMax: 25 } }
                }
            });
        }
    } catch (error) {
        console.error("Error in updateCharts:", error);
    }
}

// Show notification
function showNotification(title, message) {
    try {
        const notification = document.createElement('div');
        notification.className = 'notification-card bg-white p-4 rounded-xl shadow-lg flex items-center space-x-3 w-full max-w-sm';
        notification.innerHTML = `
            <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856a2 2 0 001.912-2.316L17.726 5.86a2 2 0 00-1.912-1.684H8.186a2 2 0 00-1.912 1.684L4.02 17.684A2 2 0 006.012 20h11.976z" />
                </svg>
            </div>
            <div>
                <div class="font-bold text-gray-900">${title}</div>
                <div class="text-sm text-gray-600">${message}</div>
            </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    } catch (error) {
        console.error("Error in showNotification:", error);
    }
}

// Award badge
function awardBadge(badgeId) {
    if (!userData.badges[badgeId]) {
        userData.badges[badgeId] = true;
        saveData();
        showNotification("Th√†nh T·ª±u M·ªõi!", `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c huy hi·ªáu "${allBadges.find(b => b.id === badgeId).name}"!`);
    }
}

// Get quiz result evaluation
function getQuizResultEvaluation(scores) {
    const { physical, mental, concentration } = scores;
    const dependencyScore = ((physical * 0.4) + (mental * 0.4) + (concentration * 0.2)) / 5;
    const dependencyPercentage = (dependencyScore / 5) * 100;
    const formattedPercentage = dependencyPercentage.toFixed(2);
   
    let evaluationDetails = `
        <p><strong>ƒêi·ªÉm ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi c·ªßa b·∫°n l√† <span class="text-indigo-600 font-bold">${formattedPercentage}%</span>.</strong> ƒê·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ con s·ªë n√†y, ch√∫ng ta h√£y c√πng ph√¢n t√≠ch chi ti·∫øt k·∫øt qu·∫£ c·ªßa b·∫°n ·ªü t·ª´ng kh√≠a c·∫°nh.</p>
        <div class="p-4 bg-white rounded-lg shadow-inner">
            <h5 class="font-bold text-lg mb-2">1. Ph√¢n t√≠ch chi ti·∫øt t·ª´ng kh√≠a c·∫°nh</h5>
            <p class="mb-1"><strong>S·ª©c kh·ªèe th·ªÉ ch·∫•t:</strong> (ƒêi·ªÉm: ${physical}/25) - ${physical >= 15 ? 'ƒêang ·ªü m·ª©c t·ªët.' : (physical >= 10 ? 'C·∫ßn c·∫£i thi·ªán.' : 'ƒêang c√≥ v·∫•n ƒë·ªÅ.')}</p>
            <p class="text-sm pl-4 mb-2">${physical >= 15 ? 'B·∫°n ƒëang duy tr√¨ m·ªôt s·ª©c kh·ªèe t·ªët, c√°c d·∫•u hi·ªáu nh∆∞ ƒëau ƒë·∫ßu, m·ªèi m·∫Øt, hay m·ªát m·ªèi th·ªÉ ch·∫•t do s·ª≠ d·ª•ng thi·∫øt b·ªã ƒëi·ªán t·ª≠ d∆∞·ªùng nh∆∞ kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ l·ªõn. ƒêi·ªÅu n√†y cho th·∫•y b·∫°n ƒë√£ bi·∫øt c√°ch c√¢n b·∫±ng gi·ªØa m√†n h√¨nh v√† c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t.' : (physical >= 10 ? 'S·ª©c kh·ªèe th·ªÉ ch·∫•t c·ªßa b·∫°n ƒëang ·ªü m·ª©c trung b√¨nh. C√≥ th·ªÉ b·∫°n ƒë√£ b·∫Øt ƒë·∫ßu c·∫£m th·∫•y m·ªèi m·∫Øt, ƒëau c·ªï ho·∫∑c gi·∫•c ng·ªß b·ªã ·∫£nh h∆∞·ªüng. H√£y ch√∫ √Ω h∆°n ƒë·∫øn c√°c d·∫•u hi·ªáu n√†y, ch√∫ng l√† l·ªùi c·∫£nh b√°o t·ª´ c∆° th·ªÉ b·∫°n. H√£y th·ª≠ c√°c b√†i t·∫≠p gi√£n c∆°, nh√¨n ra xa sau m·ªói 20 ph√∫t s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i v√† ƒë·∫£m b·∫£o ng·ªß ƒë·ªß gi·∫•c.' : 'ƒêi·ªÉm s·ªë c·ªßa b·∫°n cho th·∫•y s·ª©c kh·ªèe th·ªÉ ch·∫•t ƒëang b·ªã ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng. C√°c v·∫•n ƒë·ªÅ v·ªÅ th·ªã l·ª±c, gi·∫•c ng·ªß v√† th·ªÉ l·ª±c c√≥ th·ªÉ l√† h·∫≠u qu·∫£ tr·ª±c ti·∫øp c·ªßa vi·ªác s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi qu√° nhi·ªÅu. ƒê√¢y l√† l√∫c b·∫°n c·∫ßn ∆∞u ti√™n vi·ªác chƒÉm s√≥c b·∫£n th√¢n, ƒë·∫£m b·∫£o b·∫°n c√≥ ƒë·ªß gi·∫•c ng·ªß v√† d√†nh th·ªùi gian cho c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t ƒë·ªÉ ph·ª•c h·ªìi nƒÉng l∆∞·ª£ng.')}</p>

            <p class="mb-1"><strong>S·ª©c kh·ªèe tinh th·∫ßn:</strong> (ƒêi·ªÉm: ${mental}/25) - ${mental >= 15 ? 'R·∫•t ·ªïn ƒë·ªãnh.' : (mental >= 10 ? 'C·∫ßn ƒë∆∞·ª£c quan t√¢m.' : 'ƒêang b·ªã ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng.')}</p>
            <p class="text-sm pl-4 mb-2">${mental >= 15 ? 'B·∫°n c√≥ m·ªôt tinh th·∫ßn v·ªØng v√†ng. B·∫°n kh√¥ng qu√° lo l·∫Øng v·ªÅ vi·ªác b·ªè l·ª° c√°c xu h∆∞·ªõng v√† √≠t b·ªã ·∫£nh h∆∞·ªüng b·ªüi nh·ªØng h√¨nh ·∫£nh h√†o nho√°ng tr√™n m·∫°ng. ƒêi·ªÅu n√†y l√† m·ªôt t√†i s·∫£n qu√Ω gi√°, gi√∫p b·∫°n s·ªëng tr·ªçn v·∫πn v·ªõi hi·ªán t·∫°i.' : (mental >= 10 ? 'S·ª©c kh·ªèe tinh th·∫ßn c·ªßa b·∫°n ƒëang ·ªü m·ª©c c·∫ßn ƒë∆∞·ª£c quan t√¢m. C√≥ th·ªÉ b·∫°n ƒëang c·∫£m th·∫•y √°p l·ª±c ph·∫£i th·ªÉ hi·ªán b·∫£n th√¢n ho·∫∑c c·∫£m gi√°c tr·ªëng r·ªóng khi kh√¥ng c√≥ m·∫°ng x√£ h·ªôi. H√£y th·ª≠ vi·∫øt nh·∫≠t k√Ω, tr√≤ chuy·ªán v·ªõi b·∫°n b√® ho·∫∑c t√¨m m·ªôt s·ªü th√≠ch m·ªõi ƒë·ªÉ nu√¥i d∆∞·ª°ng c·∫£m x√∫c t√≠ch c·ª±c.' : 'ƒêi·ªÉm s·ªë th·∫•p cho th·∫•y b·∫°n ƒëang ph·∫£i ƒë·ªëi m·∫∑t v·ªõi nh·ªØng v·∫•n ƒë·ªÅ nghi√™m tr·ªçng nh∆∞ lo l·∫Øng, c·∫£m gi√°c tr·ªëng r·ªóng ho·∫∑c s·ª£ b·ªã b·ªè l·ª°. M·∫°ng x√£ h·ªôi c√≥ th·ªÉ l√† nguy√™n nh√¢n ch√≠nh d·∫´n ƒë·∫øn nh·ªØng c·∫£m x√∫c ti√™u c·ª±c n√†y. Vi·ªác so s√°nh b·∫£n th√¢n v·ªõi ng∆∞·ªùi kh√°c c√≥ th·ªÉ l√†m gi·∫£m l√≤ng t·ª± tr·ªçng. ƒê√¢y l√† l√∫c b·∫°n c·∫ßn t√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ b·∫°n b√®, gia ƒë√¨nh ho·∫∑c m·ªôt chuy√™n gia t√¢m l√Ω.')}</p>

            <p class="mb-1"><strong>M·ª©c ƒë·ªô t·∫≠p trung:</strong> (ƒêi·ªÉm: ${concentration}/25) - ${concentration >= 15 ? 'R·∫•t t·ªët.' : (concentration >= 10 ? 'C·∫ßn r√®n luy·ªán th√™m.' : 'ƒêang r·∫•t th·∫•p.')}</p>
            <p class="text-sm pl-4 mb-2">${concentration >= 15 ? 'B·∫°n c√≥ kh·∫£ nƒÉng t·∫≠p trung t·ªët. ƒêi·ªÅu n√†y gi√∫p b·∫°n h·ªçc t·∫≠p, l√†m vi·ªác hi·ªáu qu·∫£ v√† t·∫≠n h∆∞·ªüng tr·ªçn v·∫πn c√°c cu·ªôc tr√≤ chuy·ªán. H√£y ti·∫øp t·ª•c duy tr√¨ th√≥i quen t·ªët n√†y.' : (concentration >= 10 ? 'Kh·∫£ nƒÉng t·∫≠p trung c·ªßa b·∫°n ƒëang ·ªü m·ª©c trung b√¨nh. B·∫°n d·ªÖ b·ªã ph√¢n t√¢m b·ªüi c√°c th√¥ng b√°o v√† c√≥ th·ªÉ kh√≥ khƒÉn khi l√†m vi·ªác m√† kh√¥ng ki·ªÉm tra ƒëi·ªán tho·∫°i. H√£y th·ª≠ c√°c ph∆∞∆°ng ph√°p nh∆∞ Pomodoro ƒë·ªÉ d·∫ßn d·∫ßn c·∫£i thi·ªán s·ª± t·∫≠p trung c·ªßa m√¨nh.' : 'M·ª©c ƒë·ªô t·∫≠p trung c·ªßa b·∫°n ƒëang ·ªü m·ª©c b√°o ƒë·ªông. Vi·ªác d·ªÖ d√†ng b·ªã xao nh√£ng c√≥ th·ªÉ l√† d·∫•u hi·ªáu r√µ r√†ng nh·∫•t c·ªßa s·ª± ph·ª• thu·ªôc v√†o m·∫°ng x√£ h·ªôi. ƒêi·ªÅu n√†y ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn hi·ªáu qu·∫£ c√¥ng vi·ªác v√† h·ªçc t·∫≠p. H√£y th·ª≠ b·∫Øt ƒë·∫ßu v·ªõi nh·ªØng kho·∫£ng th·ªùi gian ng·∫Øn kh√¥ng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i v√† tƒÉng d·∫ßn l√™n.')}</p>
        </div>
       
        <div class="p-4 bg-white rounded-lg shadow-inner mt-4">
            <h5 class="font-bold text-lg mb-2">2. T·∫°i sao ƒëi·ªÉm s·ªë t·ªët ·ªü c√°c ph·∫ßn ri√™ng l·∫°i c√≥ th·ªÉ d·∫´n ƒë·∫øn k·∫øt qu·∫£ ph·ª• thu·ªôc cao?</h5>
            <p>ƒêi·ªÅu n√†y nghe c√≥ v·∫ª m√¢u thu·∫´n, nh∆∞ng tr√™n th·ª±c t·∫ø, n√≥ r·∫•t ph·ªï bi·∫øn. K·∫øt qu·∫£ t·ªïng th·ªÉ kh√¥ng ch·ªâ d·ª±a tr√™n vi·ªác b·∫°n c√≥ b·ªã ·∫£nh h∆∞·ªüng ti√™u c·ª±c hay kh√¥ng, m√† c√≤n v·ªÅ m·ª©c ƒë·ªô <strong>ph·ª• thu·ªôc v√†o h√†nh vi</strong>. M·ªôt ng∆∞·ªùi c√≥ th·ªÉ c√≥ s·ª©c kh·ªèe th·ªÉ ch·∫•t v√† tinh th·∫ßn kh√° t·ªët, nh∆∞ng n·∫øu h·ªç v·∫´n d√†nh <strong>ph·∫ßn l·ªõn th·ªùi gian trong ng√†y</strong> ƒë·ªÉ l∆∞·ªõt m·∫°ng x√£ h·ªôi m·ªôt c√°ch v√¥ th·ª©c, th√¨ m·ª©c ƒë·ªô ph·ª• thu·ªôc v·∫´n s·∫Ω ·ªü m·ª©c cao. ƒêi·ªÅu n√†y gi·ªëng nh∆∞ vi·ªác b·∫°n c√≥ m·ªôt chi·∫øc xe v·ªõi ƒë·ªông c∆° t·ªët, l·ªëp xe ·ªïn ƒë·ªãnh, nh∆∞ng l·∫°i m·∫•t ki·ªÉm so√°t v√¥ lƒÉng ‚Äî chi·∫øc xe v·∫´n c√≥ th·ªÉ ƒëi ƒë∆∞·ª£c, nh∆∞ng n√≥ kh√¥ng ƒëi ƒë√∫ng h∆∞·ªõng v√† c√≥ th·ªÉ g·∫∑p nguy hi·ªÉm b·∫•t c·ª© l√∫c n√†o.</p>
            <p class="mt-2">M·∫°ng x√£ h·ªôi ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ g√¢y nghi·ªán, khi·∫øn ch√∫ng ta quay l·∫°i li√™n t·ª•c. Do ƒë√≥, ngay c·∫£ khi b·∫°n kh√¥ng c·∫£m th·∫•y cƒÉng th·∫≥ng hay m·ªèi m·∫Øt, h√†nh vi l∆∞·ªõt m·∫°ng v√¥ th·ª©c, kh√¥ng c√≥ m·ª•c ƒë√≠ch r√µ r√†ng, c≈©ng ƒë√£ l√† m·ªôt d·∫°ng ph·ª• thu·ªôc. M·ª•c ti√™u cu·ªëi c√πng c·ªßa ·ª©ng d·ª•ng n√†y kh√¥ng ch·ªâ l√† gi√∫p b·∫°n tr√°nh nh·ªØng t√°c h·∫°i tr·ª±c ti·∫øp, m√† c√≤n l√† gi√∫p b·∫°n l·∫•y l·∫°i quy·ªÅn ki·ªÉm so√°t th·ªùi gian v√† s·ª± t·∫≠p trung c·ªßa m√¨nh.</p>
        </div>
       
        <div class="p-4 bg-white rounded-lg shadow-inner mt-4">
            <h5 class="font-bold text-lg mb-2">3. L·ªùi khuy√™n t·ªïng th·ªÉ</h5>
            <p>${formattedPercentage >= 60 ? 'M·ª©c ƒë·ªô ph·ª• thu·ªôc m·∫°ng x√£ h·ªôi c·ªßa b·∫°n kh√° cao. M·∫∑c d√π m·ªôt s·ªë lƒ©nh v·ª±c c√≥ th·ªÉ t·ªët, nh∆∞ng t·ªïng th·ªÉ cho th·∫•y m·∫°ng x√£ h·ªôi ƒëang chi·∫øm ph·∫ßn l·ªõn trong cu·ªôc s·ªëng c·ªßa b·∫°n. H√£y b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác gi·∫£m th·ªùi gian s·ª≠ d·ª•ng 10% m·ªói tu·∫ßn v√† t·∫≠p trung v√†o c√°c ho·∫°t ƒë·ªông ngo·∫°i tuy·∫øn.' : (formattedPercentage >= 40 ? 'M·ª©c ƒë·ªô ph·ª• thu·ªôc c·ªßa b·∫°n ·ªü m·ª©c trung b√¨nh. B·∫°n ƒë√£ nh·∫≠n ra t·∫ßm quan tr·ªçng c·ªßa vi·ªác c√¢n b·∫±ng. H√£y ti·∫øp t·ª•c gi·∫£m d·∫ßn th·ªùi gian s·ª≠ d·ª•ng v√† kh√°m ph√° th√™m c√°c ho·∫°t ƒë·ªông l√†nh m·∫°nh ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm s·ªë.' : 'M·ª©c ƒë·ªô ph·ª• thu·ªôc c·ªßa b·∫°n r·∫•t th·∫•p. B·∫°n ƒë√£ c√≥ m·ªôt l·ªëi s·ªëng c√¢n b·∫±ng v√† l√†nh m·∫°nh. H√£y ti·∫øp t·ª•c ph√°t huy ƒë·ªÉ lu√¥n l√† ng∆∞·ªùi l√†m ch·ªß cu·ªôc s·ªëng s·ªë c·ªßa m√¨nh!')}</p>
        </div>
    `;
   
    return {
        evaluationDetails,
        dependencyPercentage,
        finalAdvice: ''
    };
}

// Pomodoro Timer Functions
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
}

function playBellSound() {
    try {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        const gainNode = audioCtx.createGain();

        oscillator.type = 'sine';
        oscillator.frequency.value = 440; // A4
        gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.5, audioCtx.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime + 1);

        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 1);
    } catch (error) {
        console.error("Error in playBellSound:", error);
    }
}

function startTimer() {
    pomodoro.isRunning = true;
    const startPauseBtn = document.getElementById('start-pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    const timerStatus = document.getElementById('timer-status');
    
    if (startPauseBtn) {
        startPauseBtn.textContent = 'T·∫°m D·ª´ng';
        startPauseBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
        startPauseBtn.classList.add('bg-yellow-500', 'hover:bg-yellow-600');
    }
    
    if (resetBtn) {
        resetBtn.classList.remove('hidden');
    }

    pomodoro.intervalId = setInterval(() => {
        pomodoro.timeRemaining--;
        const timerDisplay = document.getElementById('timer-display');
        if (timerDisplay) {
            timerDisplay.textContent = formatTime(pomodoro.timeRemaining);
        }

        if (pomodoro.timeRemaining <= 0) {
            playBellSound();
            if (pomodoro.isWorkTime) {
                pomodoro.isWorkTime = false;
                pomodoro.timeRemaining = pomodoro.breakDuration;
                if (timerStatus) {
                    timerStatus.textContent = 'Gi·ªù ngh·ªâ!';
                }
            } else {
                pomodoro.isWorkTime = true;
                pomodoro.timeRemaining = pomodoro.workDuration;
                if (timerStatus) {
                    timerStatus.textContent = 'B·∫Øt ƒë·∫ßu m·ªôt chu k·ª≥ m·ªõi!';
                }
            }
            if (timerDisplay) {
                timerDisplay.textContent = formatTime(pomodoro.timeRemaining);
            }
        }
    }, 1000);
}

function pauseTimer() {
    pomodoro.isRunning = false;
    const startPauseBtn = document.getElementById('start-pause-btn');
    
    if (startPauseBtn) {
        startPauseBtn.textContent = 'Ti·∫øp T·ª•c';
        startPauseBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
        startPauseBtn.classList.add('bg-green-500', 'hover:bg-green-600');
    }
    
    clearInterval(pomodoro.intervalId);
}

function resetTimer() {
    pauseTimer();
    pomodoro.isWorkTime = true;
    pomodoro.timeRemaining = pomodoro.workDuration;
    
    const timerDisplay = document.getElementById('timer-display');
    const timerStatus = document.getElementById('timer-status');
    const startPauseBtn = document.getElementById('start-pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    
    if (timerDisplay) {
        timerDisplay.textContent = formatTime(pomodoro.workDuration);
    }
    
    if (timerStatus) {
        timerStatus.textContent = 'S·∫µn s√†ng b·∫Øt ƒë·∫ßu!';
    }
    
    if (startPauseBtn) {
        startPauseBtn.textContent = 'B·∫Øt ƒê·∫ßu';
        startPauseBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-600');
        startPauseBtn.classList.add('bg-green-500', 'hover:bg-green-600');
    }
    
    if (resetBtn) {
        resetBtn.classList.add('hidden');
    }
}

// Th√™m h√†m l·∫•y chu·ªói ng√†y c·ªßa ho·∫°t ƒë·ªông
function getActivityStreak(activityId) {
    if (!userData.completedActivities[activityId] || userData.completedActivities[activityId].length === 0) return 0;
    
    let streak = 0;
    let currentDate = new Date(getGMT7Date());
    currentDate.setHours(0, 0, 0, 0);
    
    // Ki·ªÉm tra ng∆∞·ª£c t·ª´ h√¥m nay
    while (true) {
        const dateStr = currentDate.toISOString().slice(0, 10);
        if (userData.completedActivities[activityId]?.includes(dateStr)) {
            streak++;
            // L√πi l·∫°i 1 ng√†y
            currentDate.setDate(currentDate.getDate() - 1);
        } else {
            break;
        }
    }
    
    return streak;
}

// Th√™m h√†m c·∫≠p nh·∫≠t chu·ªói ng√†y
function updateStreaks(activityId, today) {
    const lastDate = userData.lastActivityDate;
    const isSequential = lastDate && 
        (new Date(today) - new Date(lastDate)) / (1000 * 60 * 60 * 24) === 1;
    
    // C·∫≠p nh·∫≠t chu·ªói ng√†y chung
    userData.lastActivityDate = today;
    
    // C·∫≠p nh·∫≠t chu·ªói ng√†y cho t·ª´ng lo·∫°i ho·∫°t ƒë·ªông
    if (activityId.includes('reading')) {
        userData.readingStreak = isSequential ? (userData.readingStreak || 0) + 1 : 1;
        if (userData.readingStreak >= 5) awardBadge('reading_streak_5');
        if (userData.readingStreak >= 10) awardBadge('reading_streak_10');
    }
    if (activityId.includes('exercise')) {
        userData.exerciseStreak = isSequential ? (userData.exerciseStreak || 0) + 1 : 1;
        if (userData.exerciseStreak >= 5) awardBadge('exercise_streak_5');
        if (userData.exerciseStreak >= 10) awardBadge('exercise_streak_10');
    }
    if (activityId.includes('learning')) {
        userData.learningStreak = isSequential ? (userData.learningStreak || 0) + 1 : 1;
        if (userData.learningStreak >= 5) awardBadge('learning_streak_5');
        if (userData.learningStreak >= 10) awardBadge('learning_streak_10');
    }
}

// Th√™m h√†m c·∫≠p nh·∫≠t giao di·ªán l·ªãch s·ª≠ ho·∫°t ƒë·ªông
function updateActivityHistory(viewType = 'day') {
    try {
        const container = document.getElementById('history-container');
        if (!container) return;
        
        const nowGMT7 = getGMT7Date();
        const todayGMT7 = nowGMT7.toISOString().slice(0, 10);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
        const viewDayBtn = document.getElementById('view-day-btn');
        const viewWeekBtn = document.getElementById('view-week-btn');
        const viewMonthBtn = document.getElementById('view-month-btn');
        
        if (viewDayBtn) {
            viewDayBtn.className = viewType === 'day' ? 
                'px-3 py-1 bg-indigo-500 text-white rounded-lg text-sm font-medium' : 
                'px-3 py-1 bg-gray-300 text-gray-700 rounded-lg text-sm font-medium';
        }
        
        if (viewWeekBtn) {
            viewWeekBtn.className = viewType === 'week' ? 
                'px-3 py-1 bg-indigo-500 text-white rounded-lg text-sm font-medium' : 
                'px-3 py-1 bg-gray-300 text-gray-700 rounded-lg text-sm font-medium';
        }
        
        if (viewMonthBtn) {
            viewMonthBtn.className = viewType === 'month' ? 
                'px-3 py-1 bg-indigo-500 text-white rounded-lg text-sm font-medium' : 
                'px-3 py-1 bg-gray-300 text-gray-700 rounded-lg text-sm font-medium';
        }
        
        if (viewType === 'day') {
            // Hi·ªÉn th·ªã l·ªãch s·ª≠ theo ng√†y
            const todayActivities = userData.activityHistory[todayGMT7] || {};
            const allActivities = [...defaultHealthyActivities, ...(userData.customActivities || [])];
            
            container.innerHTML = `
                <div class="mb-4">
                    <h4 class="font-semibold text-lg">Ho·∫°t ƒë·ªông h√¥m nay (${todayGMT7})</h4>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                    ${allActivities.map(activity => `
                        <div class="flex items-center p-3 bg-white rounded-lg shadow-sm">
                            <div class="flex-1">
                                <p class="text-gray-700">${activity.name}</p>
                            </div>
                            <div class="w-6 h-6 rounded-full ${todayActivities[activity.id] ? 'bg-green-500' : 'bg-gray-300'} flex items-center justify-center">
                                ${todayActivities[activity.id] ? '<i class="fas fa-check text-white text-xs"></i>' : ''}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } else if (viewType === 'week') {
            // Hi·ªÉn th·ªã l·ªãch s·ª≠ theo tu·∫ßn
            const weekSummary = getWeekSummary();
            
            container.innerHTML = `
                <div class="mb-4">
                    <h4 class="font-semibold text-lg">T√≥m t·∫Øt tu·∫ßn n√†y</h4>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white rounded-lg overflow-hidden">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="py-2 px-4 text-left">Ho·∫°t ƒë·ªông</th>
                                ${weekSummary.days.map(day => `<th class="py-2 px-4 text-center">${day}</th>`).join('')}
                                <th class="py-2 px-4 text-center">T·ªïng</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${weekSummary.activities.map(activity => `
                                <tr class="border-b">
                                    <td class="py-2 px-4">${activity.name}</td>
                                    ${activity.completion.map(completed => 
                                        `<td class="py-2 px-4 text-center">
                                            ${completed ? '<i class="fas fa-check text-green-500"></i>' : '-'}
                                        </td>`
                                    ).join('')}
                                    <td class="py-2 px-4 text-center font-semibold">${activity.total}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        } else if (viewType === 'month') {
            // Hi·ªÉn th·ªã l·ªãch s·ª≠ theo th√°ng
            const monthSummary = getMonthSummary();
            
            container.innerHTML = `
                <div class="mb-4">
                    <h4 class="font-semibold text-lg">T√≥m t·∫Øt th√°ng n√†y</h4>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    ${monthSummary.map(week => `
                        <div class="bg-white p-4 rounded-lg shadow-sm">
                            <h5 class="font-semibold mb-2">Tu·∫ßn ${week.weekNumber}</h5>
                            <div class="space-y-2">
                                ${week.activities.map(activity => `
                                    <div class="flex justify-between">
                                        <span class="text-sm">${activity.name}</span>
                                        <span class="text-sm font-semibold">${activity.count} l·∫ßn</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
    } catch (error) {
        console.error("Error in updateActivityHistory:", error);
    }
}

// Th√™m h√†m l·∫•y t√≥m t·∫Øt theo tu·∫ßn
function getWeekSummary() {
    const nowGMT7 = getGMT7Date();
    const todayGMT7 = nowGMT7.toISOString().slice(0, 10);
    const currentDayOfWeek = nowGMT7.getDay();
    
    // T√≠nh ng√†y b·∫Øt ƒë·∫ßu c·ªßa tu·∫ßn (Ch·ªß Nh·∫≠t)
    const startDate = new Date(nowGMT7);
    startDate.setDate(startDate.getDate() - currentDayOfWeek);
    
    const days = [];
    const dayNames = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
    
    // T·∫°o m·∫£ng 7 ng√†y c·ªßa tu·∫ßn
    for (let i = 0; i < 7; i++) {
        const date = new Date(startDate);
        date.setDate(date.getDate() + i);
        days.push(date.toISOString().slice(0, 10));
    }
    
    // L·∫•y t·∫•t c·∫£ ho·∫°t ƒë·ªông
    const allActivities = [...defaultHealthyActivities, ...(userData.customActivities || [])];
    
    // T·∫°o d·ªØ li·ªáu t√≥m t·∫Øt
    const activities = allActivities.map(activity => {
        const completion = days.map(day => {
            return userData.activityHistory[day]?.[activity.id] || false;
        });
        
        const total = completion.filter(Boolean).length;
        
        return {
            name: activity.name,
            completion,
            total
        };
    });
    
    return {
        days: days.map(day => {
            const date = new Date(day);
            return dayNames[date.getDay()];
        }),
        activities
    };
}

// Th√™m h√†m l·∫•y t√≥m t·∫Øt theo th√°ng
function getMonthSummary() {
    const nowGMT7 = getGMT7Date();
    const year = nowGMT7.getFullYear();
    const month = nowGMT7.getMonth();
    
    // T√≠nh s·ªë tu·∫ßn trong th√°ng
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    const weeks = [];
    let currentWeek = 1;
    let currentWeekStart = new Date(firstDay);
    
    // ƒê·∫£m b·∫£o tu·∫ßn b·∫Øt ƒë·∫ßu t·ª´ Ch·ªß Nh·∫≠t
    const dayOfWeek = firstDay.getDay();
    currentWeekStart.setDate(firstDay.getDate() - dayOfWeek);
    
    while (currentWeekStart <= lastDay) {
        const weekEnd = new Date(currentWeekStart);
        weekEnd.setDate(weekEnd.getDate() + 6);
        
        // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qua ng√†y cu·ªëi th√°ng
        if (weekEnd > lastDay) {
            weekEnd.setTime(lastDay.getTime());
        }
        
        const weekActivities = [];
        
        // L·∫•y t·∫•t c·∫£ ho·∫°t ƒë·ªông
        const allActivities = [...defaultHealthyActivities, ...(userData.customActivities || [])];
        
        // T√≠nh to√°n s·ªë l·∫ßn ho√†n th√†nh m·ªói ho·∫°t ƒë·ªông trong tu·∫ßn
        allActivities.forEach(activity => {
            let count = 0;
            
            // Ki·ªÉm tra t·ª´ng ng√†y trong tu·∫ßn
            for (let day = new Date(currentWeekStart); day <= weekEnd; day.setDate(day.getDate() + 1)) {
                const dayStr = day.toISOString().slice(0, 10);
                if (userData.activityHistory[dayStr]?.[activity.id]) {
                    count++;
                }
            }
            
            if (count > 0) {
                weekActivities.push({
                    name: activity.name,
                    count
                });
            }
        });
        
        weeks.push({
            weekNumber: currentWeek,
            activities: weekActivities
        });
        
        // Chuy·ªÉn sang tu·∫ßn ti·∫øp theo
        currentWeekStart.setDate(currentWeekStart.getDate() + 7);
        currentWeek++;
    }
    
    return weeks;
}

// Event Listeners
document.addEventListener('DOMContentLoaded', function() {
    try {
        // Initialize localStorage
        initLocalStorage();
        
        // Initialize app
        initApp();
        
        // Navigation buttons
        const goToSurveyBtn = document.getElementById('go-to-survey-btn');
        if (goToSurveyBtn) {
            goToSurveyBtn.addEventListener('click', () => {
                window.location.href = 'survey.html';
            });
        }
        
        const backToMainBtn = document.getElementById('back-to-main-btn');
        if (backToMainBtn) {
            backToMainBtn.addEventListener('click', () => {
                window.location.href = 'index.html';
            });
        }
        
        const backToMainAfterQuizBtn = document.getElementById('back-to-main-after-quiz');
        if (backToMainAfterQuizBtn) {
            backToMainAfterQuizBtn.addEventListener('click', () => {
                window.location.href = 'index.html';
            });
        }
        
        // History view buttons
        const viewDayBtn = document.getElementById('view-day-btn');
        if (viewDayBtn) {
            viewDayBtn.addEventListener('click', () => {
                updateActivityHistory('day');
            });
        }
        
        const viewWeekBtn = document.getElementById('view-week-btn');
        if (viewWeekBtn) {
            viewWeekBtn.addEventListener('click', () => {
                updateActivityHistory('week');
            });
        }
        
        const viewMonthBtn = document.getElementById('view-month-btn');
        if (viewMonthBtn) {
            viewMonthBtn.addEventListener('click', () => {
                updateActivityHistory('month');
            });
        }
        
        // Main page event listeners
        const setLimitBtn = document.getElementById('set-limit-btn');
        if (setLimitBtn) {
            setLimitBtn.addEventListener('click', async () => {
                const limitInput = document.getElementById('limit-input');
                if (limitInput) {
                    const newLimit = parseInt(limitInput.value, 10);
                    if (!isNaN(newLimit) && newLimit > 0) {
                        userData.limit = newLimit;
                        saveData();
                        showNotification("Gi·ªõi h·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t", `Gi·ªõi h·∫°n h√†ng ng√†y c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† ${newLimit} ph√∫t.`);
                        updateMainUI();
                    }
                }
            });
        }

        const submitUsageBtn = document.getElementById('submit-usage-btn');
        if (submitUsageBtn) {
            submitUsageBtn.addEventListener('click', async () => {
                let totalUsage = 0;
                socialApps.forEach(app => {
                    const input = document.getElementById(`input-${app.id}`);
                    if (input) {
                        const value = parseInt(input.value, 10) || 0;
                        if (!userData.appUsage[app.id]) userData.appUsage[app.id] = Array(7).fill(0);
                        userData.appUsage[app.id][todayIndex] = value;
                        totalUsage += value;
                    }
                });

                userData.weeklyData[todayIndex] = totalUsage;
                saveData();
                showNotification("C·∫≠p nh·∫≠t th√†nh c√¥ng", `T·ªïng th·ªùi gian s·ª≠ d·ª•ng h√¥m nay l√† ${totalUsage} ph√∫t.`);
                updateMainUI();
            });
        }

        const addActivityBtn = document.getElementById('add-activity-btn');
        if (addActivityBtn) {
            addActivityBtn.addEventListener('click', async () => {
                const newActivityInput = document.getElementById('new-activity-input');
                if (newActivityInput) {
                    const newActivityName = newActivityInput.value.trim();
                    if (newActivityName) {
                        const newActivityId = newActivityName.replace(/\s+/g, '_').toLowerCase();
                        const newActivity = { id: newActivityId, name: newActivityName };
                        userData.customActivities = userData.customActivities || [];
                        userData.customActivities.push(newActivity);
                        saveData();
                        if (newActivityInput) {
                            newActivityInput.value = '';
                        }
                        showNotification("Ho·∫°t ƒë·ªông m·ªõi", "B·∫°n ƒë√£ th√™m m·ªôt ho·∫°t ƒë·ªông l√†nh m·∫°nh m·ªõi!");
                        awardBadge('custom_activity');
                        updateMainUI();
                    }
                }
            });
        }

        // Event delegation for activity buttons
        document.addEventListener('click', async (e) => {
            if (e.target.matches('.complete-activity-btn')) {
                const activityId = e.target.dataset.id;
                const activityName = defaultHealthyActivities.find(a => a.id === activityId)?.name || 
                                    userData.customActivities.find(a => a.id === activityId)?.name;
                
                const todayGMT7 = getGMT7Date().toISOString().slice(0, 10);
                
                // Ki·ªÉm tra n·∫øu ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh h√¥m nay ch∆∞a
                const completedToday = userData.completedActivities[activityId]?.includes(todayGMT7);
                
                if (!completedToday) {
                    // Th√™m ng√†y ho√†n th√†nh v√†o m·∫£ng
                    if (!userData.completedActivities[activityId]) {
                        userData.completedActivities[activityId] = [];
                    }
                    userData.completedActivities[activityId].push(todayGMT7);
                    
                    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ ho·∫°t ƒë·ªông theo ng√†y
                    if (!userData.activityHistory[todayGMT7]) {
                        userData.activityHistory[todayGMT7] = {};
                    }
                    userData.activityHistory[todayGMT7][activityId] = true;
                    
                    awardBadge('first_activity');
                    
                    // C·∫≠p nh·∫≠t chu·ªói ng√†y
                    updateStreaks(activityId, todayGMT7);
                    
                    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh h√¥m nay
                    const allActivitiesCompleted = [...defaultHealthyActivities, ...(userData.customActivities || [])]
                        .every(activity => userData.completedActivities[activity.id]?.includes(todayGMT7));
                    if (allActivitiesCompleted) {
                        awardBadge('all_activities');
                    }
                    
                    saveData();
                    updateMainUI();
                    updateActivityHistory('day');
                }
            }
        });

        // Pomodoro Timer
        const startPauseBtn = document.getElementById('start-pause-btn');
        if (startPauseBtn) {
            startPauseBtn.addEventListener('click', () => {
                if (pomodoro.timeRemaining <= 0) {
                    pomodoro.timeRemaining = pomodoro.workDuration;
                    const timerStatus = document.getElementById('timer-status');
                    if (timerStatus) {
                        timerStatus.textContent = 'Gi·ªù l√†m vi·ªác!';
                    }
                }
                if (pomodoro.isRunning) {
                    pauseTimer();
                } else {
                    startTimer();
                }
            });
        }

        const resetBtn = document.getElementById('reset-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', resetTimer);
        }

        // Survey page event listeners
        const startQuizBtn = document.getElementById('start-quiz-btn');
        if (startQuizBtn) {
            startQuizBtn.addEventListener('click', () => {
                const generateQuiz = (containerId, questions) => {
                    const container = document.getElementById(containerId);
                    if (container) {
                        container.innerHTML = questions.map((q, index) => `
                            <div class="quiz-question" data-category="${containerId}" data-index="${index}">
                                <p class="font-medium">${index + 1}. ${q.q}</p>
                                <div class="flex flex-wrap gap-2 mt-2">
                                    ${quizOptions.map((option, optIndex) => `
                                        <button data-score="${q.score[optIndex]}" class="quiz-option bg-white text-gray-700 px-3 py-1 rounded-full text-sm border border-gray-300 hover:bg-gray-100 transition duration-300">
                                            ${option}
                                        </button>
                                    `).join('')}
                                </div>
                            </div>
                        `).join('');
                        container.classList.remove('hidden');
                    }
                };

                generateQuiz('physical-questions', quizQuestions.physical);
                generateQuiz('mental-questions', quizQuestions.mental);
                generateQuiz('concentration-questions', quizQuestions.concentration);

                if (startQuizBtn) {
                    startQuizBtn.classList.add('hidden');
                }
                
                const submitQuizBtn = document.getElementById('submit-quiz-btn');
                if (submitQuizBtn) {
                    submitQuizBtn.classList.remove('hidden');
                }
                
                const quizStatus = document.getElementById('quiz-status');
                if (quizStatus) {
                    quizStatus.textContent = 'H√£y tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë·ªÉ xem k·∫øt qu·∫£.';
                }
            });
        }

        const submitQuizBtn = document.getElementById('submit-quiz-btn');
        if (submitQuizBtn) {
            submitQuizBtn.addEventListener('click', async () => {
                const allQuestions = document.querySelectorAll('.quiz-question');
                let answeredCount = 0;
                let scores = { physical: 0, mental: 0, concentration: 0 };

                allQuestions.forEach(q => {
                    const selected = q.querySelector('.quiz-option.bg-indigo-500');
                    if (selected) {
                        const category = q.dataset.category.replace('-questions', '');
                        scores[category] += parseInt(selected.dataset.score, 10);
                        answeredCount++;
                    }
                });

                if (answeredCount === allQuestions.length) {
                    const evaluation = getQuizResultEvaluation(scores);
                   
                    const quizEvaluation = document.getElementById('quiz-evaluation');
                    if (quizEvaluation) {
                        quizEvaluation.innerHTML = evaluation.evaluationDetails;
                    }
                    
                    const dependencyScore = document.getElementById('dependency-score');
                    if (dependencyScore) {
                        dependencyScore.textContent = ``;
                    }

                    const today = new Date().toISOString().slice(0, 10);
                    userData.quizHistory.push({ date: today, scores: scores });
                    
                    // L∆∞u d·ªØ li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t giao di·ªán
                    saveData();

                    const quizResultSection = document.getElementById('quiz-result-section');
                    if (quizResultSection) {
                        quizResultSection.classList.remove('hidden');
                    }
                    
                    const quizStatus = document.getElementById('quiz-status');
                    if (quizStatus) {
                        quizStatus.classList.add('hidden');
                    }
                    
                    if (submitQuizBtn) {
                        submitQuizBtn.classList.add('hidden');
                    }
                    
                    // C·∫•p th√†nh t·ª±u
                    awardBadge('quiz_pro');
                   
                    const dependencyPercentage = ((scores.physical * 0.4) + (scores.mental * 0.4) + (scores.concentration * 0.2)) / 5 * 20;
                    if (dependencyPercentage < 50) awardBadge('dependency_low_50');
                    if (dependencyPercentage < 40) awardBadge('dependency_low_40');
                    if (dependencyPercentage < 30) awardBadge('dependency_low_30');

                    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
                    const quizChartCanvas = document.getElementById('quiz-chart');
                    if (quizChartCanvas) {
                        if (window.quizChart) window.quizChart.destroy();
                        window.quizChart = new Chart(quizChartCanvas.getContext('2d'), {
                            type: 'radar',
                            data: {
                                labels: ['Th·ªÉ ch·∫•t', 'Tinh th·∫ßn', 'T·∫≠p trung'],
                                datasets: [{
                                    label: 'ƒêi·ªÉm c·ªßa b·∫°n (c√†ng cao c√†ng t·ªët)',
                                    data: [scores.physical, scores.mental, scores.concentration],
                                    backgroundColor: 'rgba(99, 102, 241, 0.2)',
                                    borderColor: '#6366f1',
                                    borderWidth: 2,
                                    pointBackgroundColor: '#6366f1'
                                }]
                            },
                            options: {
                                responsive: true,
                                elements: { line: { borderWidth: 3 } },
                                scales: { r: { suggestedMin: 0, suggestedMax: 25, pointLabels: { font: { size: 14 } } } }
                            }
                        });
                    }
                   
                    updateCharts();
                    
                    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                    showNotification("Kh·∫£o s√°t ho√†n th√†nh", "K·∫øt qu·∫£ kh·∫£o s√°t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u. H√£y quay l·∫°i trang ch√≠nh ƒë·ªÉ xem th√†nh t·ª±u m·ªõi!");
                } else {
                    const quizStatus = document.getElementById('quiz-status');
                    if (quizStatus) {
                        quizStatus.textContent = 'Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi.';
                    }
                }
            });
        }

        const quizContent = document.getElementById('quiz-content');
        if (quizContent) {
            quizContent.addEventListener('click', (e) => {
                if (e.target.matches('.quiz-option')) {
                    const parent = e.target.closest('.quiz-question');
                    if (parent) {
                        parent.querySelectorAll('.quiz-option').forEach(btn => {
                            btn.classList.remove('bg-indigo-500', 'text-white');
                            btn.classList.add('bg-white', 'text-gray-700');
                        });
                        e.target.classList.add('bg-indigo-500', 'text-white');
                        e.target.classList.remove('bg-white', 'text-gray-700');
                    }
                }
            });
        }

        // Initialize badges on first visit
        if (Object.keys(userData.badges).length === 0) {
            awardBadge('first_day');
        }
    } catch (error) {
        console.error("Error in DOMContentLoaded:", error);
    }
});
